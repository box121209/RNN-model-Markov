# note g has 1066 vertices out of the total 1073 authors
# degree distribution:
table(degree(ag))
# connected components:
cc <- clusters(ag)
table(cc$csize)
# view the full graph:
V(ag)$size <- log(1 + degree(ag))
V(ag)$color <- "white"
V(ag)$frame.color <- "white"
V(ag)$label <- V(ag)$name
V(ag)$label.cex <- 0.2
plot(ag)
# view the larger components:
threshold <- 9
idx <- which(cc$csize > threshold)
big <- induced.subgraph(ag, V(ag)[cc$membership %in% idx])
plot(big)
library(tm)
# example...
# first exclude the two malformed records:
cond <- !(plookup$Id %in% p403[!(p403 %in% p401)])
plookup_sub <- plookup[cond,]
# define corpus
corp <- plookup_sub$Abstract
corp <- VCorpus(VectorSource(corp))
# Dakota's magic code to remove invalid unicode:
corp <- tm_map(corp, content_transformer(function(x) iconv(iconv(x, "latin1", "ASCII", sub = ""), sub = "")))
# other transformations:
corp <- tm_map(corp, stripWhitespace)
corp <- tm_map(corp, removePunctuation)
corp <- tm_map(corp, removeNumbers)
corp <- tm_map(corp, content_transformer(tolower))
# stopword removal:
corp <- tm_map(corp, removeWords, stopwords("english"))
names(plookup)
corp <- plookup_sub$PaperText
corp <- VCorpus(VectorSource(corp))
# Dakota's magic code to remove invalid unicode:
corp <- tm_map(corp, content_transformer(function(x) iconv(iconv(x, "latin1", "ASCII", sub = ""), sub = "")))
# other transformations:
corp <- tm_map(corp, stripWhitespace)
corp <- tm_map(corp, removePunctuation)
corp <- tm_map(corp, removeNumbers)
corp <- tm_map(corp, content_transformer(tolower))
# stopword removal:
corp <- tm_map(corp, removeWords, stopwords("english"))
library(SnowballC)
corp <- tm_map(corp, stemDocument)
# e.g.
i <- sample(1:length(corp), 1)
cat(corp[[i]]$content)
tdm <-t(DocumentTermMatrix(corp,
control = list(weighting = function(x){
weightTfIdf(x, normalize = FALSE)
})
))
# calculate euclidean/cosine/KL distance between documents:
library(lsa)
library(fields)
#library(entropy)
N <- length(corp)
doc_term_dist_euclid <- rdist(t(as.matrix(tdm)), t(as.matrix(tdm)))
doc_term_dist_cosine <- cosine(as.matrix(tdm))
library(Rtsne)
tsne_euclid <- Rtsne(doc_term_dist_euclid, max_iter=2000, theta=0.2, is_distance=TRUE, verbose=TRUE)
plot(tsne_euclid$Y, cex=0.5)
plot(tsne_euclid$Y, cex=0.5, max_iter=5000)
tsne_euclid <- Rtsne(doc_term_dist_euclid, max_iter=4000, theta=0.1, is_distance=TRUE, verbose=TRUE)
tsne_euclid <- Rtsne(doc_term_dist_euclid, max_iter=4000, theta=0.1, is_distance=TRUE, verbose=TRUE)
tsne_euclid <- Rtsne(doc_term_dist_euclid, max_iter=4000, is_distance=TRUE, verbose=TRUE)
plot(tsne_euclid$Y, cex=0.5)
tsne_euclid <- Rtsne(doc_term_dist_euclid, max_iter=10000, is_distance=TRUE, verbose=TRUE)
plot(tsne_euclid$Y, cex=0.5)
tsne_euclid <- Rtsne(doc_term_dist_euclid, max_iter=50000, is_distance=TRUE, verbose=TRUE)
V(g)
names(plookup_sub)
names(plookup_sub)$Id
plookup_sub$Id
cond
names(plookup_sub)$Id
names(plookup_sub)
plookup_sub$Title
text(tsne_euclid$Y, labels=plookup_sub$Title, cex=0.1)
plot(tsne_euclid$Y, type='n', axes=FALSE, xlab="", ylab="")
text(tsne_euclid$Y, labels=plookup_sub$Title, cex=0.1)
setwd("~/Work/deeplearning/Keras/RNN-model")
filename <- "data/rnn_3_states_5_version_1"
path <- "data/rnn_3_states_5_version_1"
charfile <- sprintf("%s/chars.txt", path)
famfile <- sprintf("%s/families.txt", path)
distfile <- sprintf("%s/distributions.txt", path)
outfile <- sprintf("%s.pdf", path)
library(igraph)
family <- readLines(infile)
family <- readLines(famfile)
family
chars <- readLines(charfile)
chars
dist <- readLines(distfile)
dist
s <- dist[1]
s
strsplit(s, " ")
as.numeric(strsplit(s, " "))
as.numeric(strsplit(s, " ")[[1]])
dist <- sapply(readLines(distfile), function(s){as.numeric(strsplit(s, " ")[[1]])})
dist
dist[1]
dist <- lapply(readLines(distfile), function(s){as.numeric(strsplit(s, " ")[[1]])})
dist
family[1]
f <- family[1]
f
d <- dist[[1]]
d
family <- lapply(readLines(famfile), function(s){ strsplit(s,"")[[1]] })
f <- family[1]
f
d <- dist[[1]]
d
f <- family[1][[1]]
d <- dist[[1]]
f
d
chars
df0 <- data.frame(chars, rep(0.0, length(chars)))
df0
df1 <- data.frame(f,d)
df1
?merge
merge(df0, df1, by.x=chars, by.y=f)
merge(df0, df1, by.x='chars', by.y='f')
merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
dist <- lapply(readLines(distfile), function(s){ as.numeric(strsplit(s, " ")[[1]]) })
dist[1]
dist[[1]
]
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
df
?aggregate
aggregate(df, by=list(2,3), FUN=sum)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
names(df) <- c("chars","c1","c2")
aggregate(df, by=list(c1, c2), FUN=sum)
df
aggregate(df, by=list('c1', 'c2'), FUN=sum)
aggregate(df, by=list('c1', 'c2'), sum)
aggregate(df, by=list(df$c1, df$c2), sum)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
df[,2] <- sapply(df[,3], function(x) if(is.na(x)) 0 else x)
df
dist
n <- length(dist)
n
chars <- readLines(charfile)
family <- lapply(readLines(famfile), function(s){ strsplit(s,"")[[1]] })
dist <- lapply(readLines(distfile), function(s){ as.numeric(strsplit(s, " ")[[1]]) })
n <- length(dist)
dist <- lapply(1:n, function(i){
f <- family[i][[1]]
d <- dist[[i]]
df0 <- data.frame(chars, rep(0.0, length(chars)))
df1 <- data.frame(f,d)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
sapply(df[,3], function(x) if(is.na(x)) 0 else x)
})
dist
dist[[5]]
family[[5]]
chars
chars <- readLines(charfile)
family <- lapply(readLines(famfile), function(s){ strsplit(s,"")[[1]] })
dist0 <- lapply(readLines(distfile), function(s){ as.numeric(strsplit(s, " ")[[1]]) })
n <- length(dist)
dist <- lapply(1:n, function(i){
f <- family[i][[1]]
d <- dist[[i]]
df0 <- data.frame(chars, rep(0.0, length(chars)))
df1 <- data.frame(f,d)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
sapply(df[,3], function(x) if(is.na(x)) 0 else x)
})
chars <- readLines(charfile)
family <- lapply(readLines(famfile), function(s){ strsplit(s,"")[[1]] })
dist0 <- lapply(readLines(distfile), function(s){ as.numeric(strsplit(s, " ")[[1]]) })
n <- length(dist)
dist <- lapply(1:n, function(i){
f <- family[i][[1]]
d <- dist0[[i]]
df0 <- data.frame(chars, rep(0.0, length(chars)))
df1 <- data.frame(f,d)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
sapply(df[,3], function(x) if(is.na(x)) 0 else x)
})
n <- length(family)
dist0[[5]]
dist[[5]]
family[[5]]
chars
family <- lapply(readLines(famfile), function(s){ sort(strsplit(s,"")[[1]]) })
chars <- readLines(charfile)
family <- lapply(readLines(famfile), function(s){ sort(strsplit(s,"")[[1]]) })
dist0 <- lapply(readLines(distfile), function(s){ as.numeric(strsplit(s, " ")[[1]]) })
n <- length(dist)
dist <- lapply(1:n, function(i){
f <- family[i][[1]]
d <- dist0[[i]]
df0 <- data.frame(chars, rep(0.0, length(chars)))
df1 <- data.frame(f,d)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
sapply(df[,3], function(x) if(is.na(x)) 0 else x)
})
dist[[5]]
family[[5]]
chars
dist0[[5]]
chars <- sort(readLines(charfile))
family <- lapply(readLines(famfile), function(s){ sort(strsplit(s,"")[[1]]) })
dist0 <- lapply(readLines(distfile), function(s){ as.numeric(strsplit(s, " ")[[1]]) })
n <- length(dist)
dist <- lapply(1:n, function(i){
f <- family[i][[1]]
d <- dist0[[i]]
df0 <- data.frame(chars, rep(0.0, length(chars)))
df1 <- data.frame(f,d)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
sapply(df[,3], function(x) if(is.na(x)) 0 else x)
})
dist[[5]]
family[[5]]
dist0[[5]]
chars
library(flexmix)
install.packages("flexmix")
library(flexmix)
?flexmix
KLdiv <- function(d1, d2) sum(-d1*log(d2))
d2 <- dist[[2]]
d1 <- dist[[1]]
d2 <- dist[[2]]
KLdiv(d1, d2)
KLdiv <- function(d1, d2) sum(if(d2==0.0) 0 else -d1*log(d2)))
KLdiv <- function(d1, d2) sum(if(d2==0.0) 0 else -d1*log(d2))
d1 <- dist[[1]]
d2 <- dist[[2]]
KLdiv(d1, d2)
d1
d2
log(d2)
KLdiv <- function(d1, d2) sum(-d1*log(d1/d2))
d1 <- dist[[1]]
d2 <- dist[[2]]
KLdiv(d1, d2)
d1
d2
KLdiv <- function(d1, d2) sum(-d1*log(d2))
d1 <- dist[[1]]
d2 <- dist[[2]]
KLdiv(d1, d2)
dist
dist
path <- "data/rnn_3_states_5_version_1"
charfile <- sprintf("%s/chars.txt", path)
famfile <- sprintf("%s/families.txt", path)
distfile <- sprintf("%s/distributions.txt", path)
outfile <- sprintf("%s.pdf", path)
chars <- sort(readLines(charfile))
family <- lapply(readLines(famfile), function(s){ sort(strsplit(s,"")[[1]]) })
distr0 <- lapply(readLines(distfile), function(s){ as.numeric(strsplit(s, " ")[[1]]) })
n <- length(dist)
distr <- lapply(1:n, function(i){
f <- family[i][[1]]
d <- dist0[[i]]
df0 <- data.frame(chars, rep(0.0, length(chars)))
df1 <- data.frame(f,d)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
sapply(df[,3], function(x) if(is.na(x)) 0 else x)
})
chars <- sort(readLines(charfile))
family <- lapply(readLines(famfile), function(s){ sort(strsplit(s,"")[[1]]) })
distr0 <- lapply(readLines(distfile), function(s){ as.numeric(strsplit(s, " ")[[1]]) })
n <- length(distr)
n <- length(distr0)
distr <- lapply(1:n, function(i){
f <- family[i][[1]]
d <- distr0[[i]]
df0 <- data.frame(chars, rep(0.0, length(chars)))
df1 <- data.frame(f,d)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
sapply(df[,3], function(x) if(is.na(x)) 0 else x)
})
distr
dist
mat <- dist(distr, method="euclidean")
mat
distr
as.matrix(distr)
dmat <- matrix(n,n)
dmat
dmat <- matrix(nrow=n, ncol=n)
dmat
n <- length(family)
dmat <- matrix(nrow=n, ncol=n)
for(i in 1:n)
for(j in 1:n)
dmat[i,j] <- sum(-distr[[i]]*log(distr[[j]]))
library(igraph)
ddmat
dmat
n <- length(family)
dmat <- matrix(nrow=n, ncol=n)
for(i in 1:n)
for(j in 1:n)
dmat[i,j] <- sum((distr[[i]]-distr[[j]])^2)
dmat
path <- "data/rnn_3_states_5_version_1"
charfile <- sprintf("%s/chars.txt", path)
famfile <- sprintf("%s/families.txt", path)
distfile <- sprintf("%s/distributions.txt", path)
outfile <- sprintf("%s/families.pdf", path)
# parse the data:
chars <- sort(readLines(charfile))
family <- lapply(readLines(famfile), function(s){ sort(strsplit(s,"")[[1]]) })
distr0 <- lapply(readLines(distfile), function(s){ as.numeric(strsplit(s, " ")[[1]]) })
n <- length(distr0)
distr <- lapply(1:n, function(i){
f <- family[i][[1]]
d <- distr0[[i]]
df0 <- data.frame(chars, rep(0.0, length(chars)))
df1 <- data.frame(f,d)
df <- merge(df0, df1, by.x='chars', by.y='f', all=TRUE)
sapply(df[,3], function(x) if(is.na(x)) 0 else x)
})
# compute KL matrix:
KLdiv <- function(d1, d2){
sqrt(sum((d1-d2)^2))
}
n <- length(family)
dmat <- matrix(nrow=n, ncol=n)
for(i in 1:n)
for(j in 1:n)
dmat[i,j] <- KLdiv(distr[[i]], distr[[j]])
# build graph:
library(igraph)
n <- length(family)
g <- make_empty_graph(n=n, directed=FALSE)
V(g)$name <- readLines(famfile)
for(i in 1:(n-1)){
for(j in (i+1):n){
s1 <- family[[i]]
s2 <- family[[j]]
wt <- length(intersect(s1, s2))
if(wt > 0) wt <- KLdiv[i,j]
if(wt>0) g <- add.edges(g, c(i,j), attr=list(weight=wt))
}
}
E(g)$width <- E(g)$weight^2
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
E(g)$width <- 10*E(g)$weight^2
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
n <- length(family)
g <- make_empty_graph(n=n, directed=FALSE)
V(g)$name <- readLines(famfile)
for(i in 1:(n-1)){
for(j in (i+1):n){
s1 <- family[[i]]
s2 <- family[[j]]
wt <- length(intersect(s1, s2))
#if(wt > 0) wt <- KLdiv[i,j]
if(wt>0) g <- add.edges(g, c(i,j), attr=list(weight=wt))
}
}
E(g)$width <- E(g)$weight^2
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
E(g)$width
for(i in 1:(n-1)){
for(j in (i+1):n){
s1 <- family[[i]]
s2 <- family[[j]]
wt <- length(intersect(s1, s2))
#if(wt > 0) wt <- KLmat[i,j]
if(wt>0) g <- add.edges(g, c(i,j), attr=list(weight=KLmat[i,j]))
}
}
E(g)$width <- E(g)$weight^2
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
E(g)$width
for(i in 1:(n-1)){
for(j in (i+1):n){
s1 <- family[[i]]
s2 <- family[[j]]
wt <- length(intersect(s1, s2))
#if(wt > 0) wt <- KLmat[i,j]
if(wt>0) g <- add.edges(g, c(i,j), attr=list(weight=KLmat[i,j]))
}
}
for(i in 1:(n-1)){
for(j in (i+1):n){
s1 <- family[[i]]
s2 <- family[[j]]
wt <- length(intersect(s1, s2))
#if(wt > 0) wt <- KLmat[i,j]
if(wt>0) g <- add.edges(g, c(i,j), attr=list(weight=dmat[i,j]))
}
}
E(g)$width <- E(g)$weight^2
E(g)$width
E(g)$width <- E(g)$weight^2
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
n <- length(family)
g <- make_empty_graph(n=n, directed=FALSE)
V(g)$name <- readLines(famfile)
for(i in 1:(n-1)){
for(j in (i+1):n){
s1 <- family[[i]]
s2 <- family[[j]]
wt <- length(intersect(s1, s2))
if(wt>0) g <- add.edges(g, c(i,j), attr=list(weight=dmat[i,j]))
}
}
E(g)$width <- E(g)$weight^2
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
E(g)$width <- 10E(g)$weight^2
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
E(g)$width <- 10*E(g)$weight^2
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
E(g)$width <- log(1/E(g)$weight)
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
E(g)$width
for(i in 1:(n-1)){
for(j in (i+1):n){
s1 <- family[[i]]
s2 <- family[[j]]
wt <- length(intersect(s1, s2))
if(wt>0) g <- add.edges(g, c(i,j), attr=list(weight=1/dmat[i,j]))
}
}
E(g)$width <- E(g)$weight
E(g)$width
plot(g)
n <- length(family)
g <- make_empty_graph(n=n, directed=FALSE)
V(g)$name <- readLines(famfile)
for(i in 1:(n-1)){
for(j in (i+1):n){
s1 <- family[[i]]
s2 <- family[[j]]
wt <- length(intersect(s1, s2))
if(wt>0) g <- add.edges(g, c(i,j), attr=list(weight=1/dmat[i,j]))
}
}
E(g)$width <- E(g)$weight
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
n <- length(family)
g <- make_empty_graph(n=n, directed=FALSE)
V(g)$name <- readLines(famfile)
for(i in 1:(n-1)){
for(j in (i+1):n){
s1 <- family[[i]]
s2 <- family[[j]]
wt <- length(intersect(s1, s2))
if(wt>0) g <- add.edges(g, c(i,j), attr=list(weight=1/dmat[i,j]))
}
}
E(g)$width <- E(g)$weight^2
V(g)$size <- 8 * sapply(V(g)$name, nchar)
V(g)$color <- 'white'
V(g)$frame.color <- 'blue'
V(g)$label <- sapply(1:vcount(g), function(i) sprintf("%d\n%s", i-1, V(g)$name[i]))
plot(g)
outfile
